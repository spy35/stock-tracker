name: Build and deploy Node.js app to Azure Web App - stock-tracker-webapp

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clean and install dependencies
        run: |
          rm -rf node_modules package-lock.json .next
          npm ci

      - name: Build application
        run: |
          npm run build
        env:
          CI: true
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_URL: https://stock-tracker-webapp.azurewebsites.net

      - name: Debug build output
        run: |
          echo "=== Build Output Debug ==="
          echo "Current directory contents:"
          ls -la
          echo ""
          echo ".next directory contents:"
          ls -la .next/ || echo ".next directory not found"
          echo ""
          echo "Standalone directory contents:"
          ls -la .next/standalone/ || echo "Standalone directory not found"
          echo ""
          echo "Package.json name:"
          grep '"name"' package.json

      - name: Create deployment package
        run: |
          if [ ! -d ".next/standalone" ]; then
            echo "❌ ERROR: Standalone build not found!"
            echo "Available directories in .next:"
            ls -la .next/
            exit 1
          fi
          
          echo "✅ Standalone build found, creating deployment package..."
          
          # standalone 디렉토리로 이동
          cd .next/standalone
          
          # 현재 디렉토리 내용 확인
          echo "Standalone directory contents:"
          ls -la
          
          # 필요한 파일들 복사
          cp ../../package.json .
          cp ../../server.js .
          cp ../../next.config.js .
          
          # public 폴더 복사
          if [ -d "../../public" ]; then
            cp -r ../../public .
            echo "✅ Public folder copied"
          fi
          
          # static 파일 복사
          if [ -d "../static" ]; then
            mkdir -p .next
            cp -r ../static .next/
            echo "✅ Static files copied"
          fi
          
          # 최종 패키지 내용 확인
          echo "Final package contents:"
          ls -la
          
          # ZIP 파일 생성
          zip -r ../../deployment.zip . -x "*.git*" "*.DS_Store*"
          
          cd ../..
          echo "✅ Deployment package created ($(du -h deployment.zip | cut -f1))"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deployment.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip and verify deployment
        run: |
          unzip deployment.zip
          echo "=== Deployment Package Contents ==="
          ls -la
          echo ""
          echo "Package.json contents:"
          cat package.json | head -10
          echo ""
          echo "Server.js exists:"
          ls -la server.js || echo "server.js not found"
          echo ""
          echo ".next directory:"
          ls -la .next/ || echo ".next directory not found"

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'stock-tracker-webapp'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
